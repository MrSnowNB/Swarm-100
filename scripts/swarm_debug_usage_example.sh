#!/bin/bash
# ---
# script: swarm_debug_usage_example.sh
# purpose: Usage examples for Swarm-100 debug analyzer
# generated by: Grok Reasoning Analysis (Phase 3)
# ---

echo "üêõ SWARM-100 DEBUG ANALYZER USAGE EXAMPLES"
echo "=============================================="

# Example 1: Basic health check - analyze last 24 hours
echo "
üîç Example 1: Basic Health Analysis (Last 24 Hours)"
echo "python3 scripts/swarm_debug_analyzer.py --hours 24"
echo "Expected Output: Comprehensive report with agent health scores and failure detection"
echo ""

# Example 2: Emergency analysis - analyze last hour for critical issues
echo "
üö® Example 2: Emergency Analysis (Last 1 Hour - Critical Issues Only)"
echo "python3 scripts/swarm_debug_analyzer.py --hours 1"
echo "Expected Output: Focused analysis on recent critical failures and system health"
echo ""

# Example 3: Export data for further analysis
echo "
üíæ Example 3: Export Analysis to JSON (Last 48 Hours)"
echo "python3 scripts/swarm_debug_analyzer.py --hours 48 --output-json debug_report.json"
echo "Expected Output: JSON export of full analysis for external tools/visualization"
echo ""

# Example 4: Custom logs directory
echo "
üìÅ Example 4: Analyze Custom Logs Directory"
echo "python3 scripts/swarm_debug_analyzer.py --logs-dir /path/to/custom/logs --hours 24"
echo "Expected Output: Analysis of logs from non-standard locations"
echo ""

# Example integration with shell scripts
echo "
üîß Integration Example: Swarm Health Check in Production"
echo "# In your deployment scripts:"
echo "python3 scripts/swarm_debug_analyzer.py --hours 1"
echo "EXIT_CODE=\$?"
echo ""
echo "if [ \$EXIT_CODE -eq 0 ]; then"
echo "    echo '‚úÖ Swarm is healthy'"
echo "elif [ \$EXIT_CODE -eq 1 ]; then"
echo "    echo '‚ö†Ô∏è  Swarm needs attention'"
echo "else"
echo "    echo 'üö® Critical issues detected - immediate intervention required'"
echo "fi"
echo ""

# Real-world log patterns that the analyzer detects
echo "
üéØ Detected Log Patterns & Grok Recommendations:"
echo ""
echo "1. Ollama Overload Cascade:"
echo "   Pattern: 'Ollama.*returned.*[45][0-9][0-9].*for query'"
echo "   üß† Grok Recommendation: Deploy separate Ollama instances per GPU"
echo ""
echo "2. Gossip Network Isolation:"
echo "   Pattern: 'Agent.*has no neighbors in gossip network'"
echo "   üß† Grok Recommendation: Implement p2p messaging layer with gossip protocol"
echo ""
echo "3. GPU Memory Cascade:"
echo "   Pattern: 'Memory pool exhausted.*bot_'"
echo "   üß† Grok Recommendation: Reduce gpu_memory_fraction and add quota enforcement"
echo ""

echo "üìä Exit Codes:"
echo "0 = Healthy (score ‚â•80/100)"
echo "1 = Warning (score 50-79/100)"
echo "2 = Critical (score <50/100)"
echo ""

echo "üß† Powered by Grok Reasoning Analysis - Phase 3"
echo "==============================================="
